-- simple creation etc - value rendered is passed back as it came in
select '100 eur'::currency as "100 eur";
 100 eur 
---------
 100 EUR
(1 row)

select '-100 eur'::currency as "-100 eur";
 -100 eur 
----------
 -100 EUR
(1 row)

select '100.00 eur'::currency as "100.00 eur";
 100.00 eur 
------------
 100.00 EUR
(1 row)

select '-100.00 eur'::currency as "-100.00 eur";
 -100.00 eur 
-------------
 -100.00 EUR
(1 row)

select '100eur'::currency as "100 eur";
 100 eur 
---------
 100 EUR
(1 row)

-- these values make no sense, but who cares :)
select '-100.005 eur'::currency as "-100.005 eur";
 -100.005 eur 
--------------
 -100.005 EUR
(1 row)

select '-100.006 eur'::currency as "-100.006 eur";
 -100.006 eur 
--------------
 -100.006 EUR
(1 row)

-- formatting for display requires the currency_rates table
select format('100 nzd'::currency) as "NZD 100.00";
 NZD 100.00 
------------
 NZD 100.00
(1 row)

select format('-100.006 eur'::currency) as "€ -100.01";
 € -100.01 
-----------
 € -100.01
(1 row)

select #('123.456 gbp'::currency) as "£ 123.46";
 £ 123.46 
----------
 £ 123.46
(1 row)

-- test conversion
select change('100 nzd'::currency, 'btc') as "300.00 BTC";
 300.00 BTC 
------------
 300 BTC
(1 row)

select format(change('100 nzd'::currency, 'gbp')) as "£ 42.86";
 £ 42.86 
---------
 £ 42.86
(1 row)

select #('123.456 usd'::currency->'eur') as "€ 82.30";
 € 82.30 
---------
 € 82.30
(1 row)

-- code and value
select code('100nzd'::currency) as "NZD";
 NZD 
-----
 NZD
(1 row)

select value('100nzd'::currency) as "100";
 100 
-----
 100
(1 row)

-- and the other way around
select currency('20', 'nzd') as "20 NZD";
 20 NZD 
--------
 20 NZD
(1 row)

select ('20'||'nzd')::currency as "20 NZD";
 20 NZD 
--------
 20 NZD
(1 row)

-- the below might be appropriate if 'tla' were actually a currency
-- code type, but if it's just a generic three letters, it makes no
-- sense.
select 20 * 'nzd'::tla as ERROR;
ERROR:  operator does not exist: integer * tla
LINE 1: select 20 * 'nzd'::tla as ERROR;
                  ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
-- casting to money : locale dependent test (FIXME)
select currency('20', 'nzd')::money as "$60.00";
 $60.00 
--------
 $60.00
(1 row)

-- test comparisons
select '100 nzd'::currency = '100 nzd'::currency as t;
 t 
---
 t
(1 row)

select '100 nzd'::currency = '300 btc'::currency as t;
 t 
---
 t
(1 row)

select '100 nzd'::currency =  '50 eur'::currency as t;
 t 
---
 t
(1 row)

select '100 nzd'::currency = '101 nzd'::currency as f;
 f 
---
 f
(1 row)

select '100 nzd'::currency = '301 btc'::currency as f;
 f 
---
 f
(1 row)

select '100 nzd'::currency =  '51 eur'::currency as f;
 f 
---
 f
(1 row)

select '100 nzd'::currency = '100 nzd'::currency as t;
 t 
---
 t
(1 row)

select '300 btc'::currency = '100 nzd'::currency as t;
 t 
---
 t
(1 row)

select '50 eur'::currency  = '100 nzd'::currency as t;
 t 
---
 t
(1 row)

select '101 nzd'::currency = '100 nzd'::currency as f;
 f 
---
 f
(1 row)

select '301 btc'::currency = '100 nzd'::currency as f;
 f 
---
 f
(1 row)

select '51 eur'::currency  = '100 nzd'::currency as f;
 f 
---
 f
(1 row)

-- !=
select '100 nzd'::currency != '100 nzd'::currency as f;
 f 
---
 f
(1 row)

select '100 nzd'::currency != '300 btc'::currency as f;
 f 
---
 f
(1 row)

select '100 nzd'::currency !=  '50 eur'::currency as f;
 f 
---
 f
(1 row)

select '100 nzd'::currency != '101 nzd'::currency as t;
 t 
---
 t
(1 row)

select '100 nzd'::currency != '301 btc'::currency as t;
 t 
---
 t
(1 row)

select '100 nzd'::currency !=  '51 eur'::currency as t;
 t 
---
 t
(1 row)

-- don't bother with all cases for the other operators
select '60 usd'::currency = '40 eur'::currency as t;
 t 
---
 t
(1 row)

select '61 usd'::currency = '40 eur'::currency as f;
 f 
---
 f
(1 row)

select '60 usd'::currency = '41 eur'::currency as f;
 f 
---
 f
(1 row)

select '60 usd'::currency != '40 eur'::currency as f;
 f 
---
 f
(1 row)

select '61 usd'::currency != '40 eur'::currency as t;
 t 
---
 t
(1 row)

select '60 usd'::currency != '41 eur'::currency as t;
 t 
---
 t
(1 row)

select '60 usd'::currency < '40 eur'::currency as f;
 f 
---
 f
(1 row)

select '61 usd'::currency < '40 eur'::currency as f;
 f 
---
 f
(1 row)

select '60 usd'::currency < '41 eur'::currency as t;
 t 
---
 t
(1 row)

select '60 usd'::currency <= '40 eur'::currency as t;
 t 
---
 t
(1 row)

select '61 usd'::currency <= '40 eur'::currency as f;
 f 
---
 f
(1 row)

select '60 usd'::currency <= '41 eur'::currency as t;
 t 
---
 t
(1 row)

select '60 usd'::currency > '40 eur'::currency as f;
 f 
---
 f
(1 row)

select '61 usd'::currency > '40 eur'::currency as t;
 t 
---
 t
(1 row)

select '60 usd'::currency > '41 eur'::currency as f;
 f 
---
 f
(1 row)

select '60 usd'::currency >= '40 eur'::currency as t;
 t 
---
 t
(1 row)

select '61 usd'::currency >= '40 eur'::currency as t;
 t 
---
 t
(1 row)

select '60 usd'::currency >= '41 eur'::currency as f;
 f 
---
 f
(1 row)

create table amounts (
       description text,
       value currency
);
CREATE TABLE
\copy amounts from 'data/amounts.data'
-- test sorting
--select max(value) from amounts;
select description, value from amounts order by value desc limit 3;
       description       |   value   
-------------------------+-----------
 Tulsi Prawn Vindaloo    | 11.00 USD
 Daawat Chicken Vindaloo | 10.00 USD
 Daawat Beef Vindaloo    | 10.00 USD
(3 rows)

select description, value from amounts order by value asc limit 3;
      description      |  value   
-----------------------+----------
 Tulsi Dal Makhani     | 6.90 NZD
 Tulsi Vegetable Curry | 6.90 NZD
 Tulsi Navrattan Korma | 6.90 NZD
(3 rows)

-- check the hashing function (which is not immutable)
select hash_currency('100 eur'::currency) = hash_currency('100 eur'::currency) as t;
 t 
---
 t
(1 row)

select hash_currency('100 eur'::currency) != hash_currency('101 eur'::currency) as t;
 t 
---
 t
(1 row)

select hash_currency('100 eur'::currency) != hash_currency('100 nzd'::currency) as t;
 t 
---
 t
(1 row)

select hash_currency('40 eur'::currency) = hash_currency('60 usd'::currency) as t;
 t 
---
 t
(1 row)

select hash_currency('100 eur'::currency) = hash_currency('100.00 eur'::currency) as t;
 t 
---
 t
(1 row)

-- addition of currency units
select '60 usd'::currency + '20 nzd'::currency as "300 BTC";
 300 BTC 
---------
 300 BTC
(1 row)

select '60 usd'::currency + '20 usd'::currency as "80 USD";
 80 USD 
--------
 80 USD
(1 row)

select '60 usd'::currency + '-60 usd'::currency as "0 USD";
 0 USD 
-------
 0 USD
(1 row)

select '60 usd'::currency - '20 nzd'::currency as "180 BTC";
 180 BTC 
---------
 180 BTC
(1 row)

select '60 usd'::currency - '20 usd'::currency as "40 USD";
 40 USD 
--------
 40 USD
(1 row)

select '60 usd'::currency - '-60 usd'::currency as "120 USD";
 120 USD 
---------
 120 USD
(1 row)

-- multiplication
select '60 usd'::currency * '20 nzd'::currency as ERROR;
ERROR:  operator does not exist: currency * currency
LINE 1: select '60 usd'::currency * '20 nzd'::currency as ERROR;
                                  ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
select '60 usd'::currency * 20 as "1200 USD";
 1200 USD 
----------
 1200 USD
(1 row)

select 21 * '61 usd'::currency as "1281 USD";
 1281 USD 
----------
 1281 USD
(1 row)

-- division
select round('60 usd'::currency / '20 usd'::currency, 7) as "3.0000000";
 3.0000000 
-----------
 3.0000000
(1 row)

select #('60 usd'::currency / 20) as "USD 3.00";
 USD 3.00 
----------
 USD 3.00
(1 row)

select round('60 usd'::currency / '20 nzd'::currency, 7) as "4.0000000";
 4.0000000 
-----------
 4.0000000
(1 row)

