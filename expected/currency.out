-- simple creation etc - value rendered is passed back as it came in
select '100 eur'::currency as "100 eur";
 100 eur 
---------
 100 EUR
(1 row)

select '-100 eur'::currency as "-100 eur";
 -100 eur 
----------
 -100 EUR
(1 row)

select '100.00 eur'::currency as "100.00 eur";
 100.00 eur 
------------
 100.00 EUR
(1 row)

select '-100.00 eur'::currency as "-100.00 eur";
 -100.00 eur 
-------------
 -100.00 EUR
(1 row)

select '100eur'::currency as "100 eur";
 100 eur 
---------
 100 EUR
(1 row)

-- these values make no sense, but who cares :)
select '-100.005 eur'::currency as "-100.005 eur";
 -100.005 eur 
--------------
 -100.005 EUR
(1 row)

select '-100.006 eur'::currency as "-100.006 eur";
 -100.006 eur 
--------------
 -100.006 EUR
(1 row)

-- formatting for display requires the currency_rates table
select format('100 nzd'::currency) as "NZD 100.00";
 NZD 100.00 
------------
 NZD 100.00
(1 row)

select format('-100.006 eur'::currency) as "€ -100.01";
 € -100.01 
-----------
 € -100.01
(1 row)

select #('123.456 gbp'::currency) as "£ 123.46";
 £ 123.46 
----------
 £ 123.46
(1 row)

-- test conversion
select change('100 nzd'::currency, 'btc') as "300.00 BTC";
 300.00 BTC 
------------
 300 BTC
(1 row)

select format(change('100 nzd'::currency, 'gbp')) as "£ 42.86";
 £ 42.86 
---------
 £ 42.86
(1 row)

select #('123.456 usd'::currency->'eur') as "€ 82.30";
 € 82.30 
---------
 € 82.30
(1 row)

-- code and value
select code('100nzd'::currency) as "NZD";
 NZD 
-----
 NZD
(1 row)

select value('100nzd'::currency) as "100";
 100 
-----
 100
(1 row)

-- and the other way around
select currency('20', 'nzd') as "20 NZD";
 20 NZD 
--------
 20 NZD
(1 row)

select ('20'||'nzd')::currency as "20 NZD";
 20 NZD 
--------
 20 NZD
(1 row)

-- the below might be appropriate if 'tla' were actually a currency
-- code type, but if it's just a generic three letters, it makes no
-- sense.
select 20 * 'nzd'::tla as ERROR;
ERROR:  operator does not exist: integer * tla
LINE 1: select 20 * 'nzd'::tla as ERROR;
                  ^
HINT:  No operator matches the given name and argument type(s). You might need to add explicit type casts.
